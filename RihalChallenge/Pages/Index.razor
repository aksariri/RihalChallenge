@page "/"

@using RihalChallenge.VModel
@inject RihalChallenge.Services.DashboardServices.IDashboardServices _dashboardServices
<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h4">Average age of students is @dashboard.AverageStudentsAge</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    
</MudCard>

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Count of students per class</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTable Elevation="25" Items="_classesDashboard" Filter="new Func<classesDashboard, bool>(Search)" @bind-customer="dashboard.classesDashboards">
            <ToolBarContent>
                <MudText Typo="Typo.h6">classes</MudText>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search for classes..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Class Name</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Classe Name">@context.className</MudTd>
                <MudTd DataLabel="Students Count">@context.studentCount</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 5, 10, 20, 50 }" />
            </PagerContent>
        </MudTable>
    </MudCardContent>
</MudCard>


<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Count of students per country</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTable Elevation="25" Items="_countryDashboard" Filter="new Func<CountryDashboard, bool>(Search)" @bind-customer="dashboard.countryDashboards">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Countries</MudText>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search for countries..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Class Name</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Country Name">@context.CountryName</MudTd>
                <MudTd DataLabel="Students Count">@context.studentCount</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 5, 10, 20, 50 }" />
            </PagerContent>
        </MudTable>
    </MudCardContent>
</MudCard>

@code{

    private string searchString = "";
    private string searchString1 = "";

    public Dashboard dashboard = new();
    public classesDashboard classesDashboard = new();
    public List<classesDashboard> _classesDashboard = new();
    public CountryDashboard countryDashboard = new();
    public List<CountryDashboard> _countryDashboard = new();
    protected override async Task OnInitializedAsync()
    {
        await getDashboardData();
    }


    public async Task<Dashboard> getDashboardData()
    {
        dashboard = await _dashboardServices.getDashboardData();
        _classesDashboard = dashboard.classesDashboards;
        _countryDashboard = dashboard.countryDashboards;
        return dashboard;
    }
   

    private bool Search(classesDashboard classes) => _Search(classes, searchString);

    private bool _Search(classesDashboard classes, string searchString1)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (classes.className.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private bool Search(CountryDashboard country) => _Search(country, searchString);

    private bool _Search(CountryDashboard country, string searchString1)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (country.CountryName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}